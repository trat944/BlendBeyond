// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                          String   @id @default(auto()) @map("_id") @db.ObjectId
  name                        String
  email                       String   @unique
  password                    String
  pictureId                   String?
  pictureUrl                  String?
  birthdate                   DateTime?
  age                         Int?
  city                        String?
  sex                         String?
  lookingFor                  String?
  likedBy           Like[]    @relation("LikedUsers")
  likedUsers        Like[]    @relation("LikedBy")
  dislikedBy        Dislike[] @relation("DislikedUsers")
  dislikedUsers     Dislike[] @relation("DislikedBy")
  sentMessages      Message[] @relation("SenderUser")
  receivedMessages  Message[] @relation("ReceiverUser")
  createAt          DateTime  @default(now())
  updateAt          DateTime  @updatedAt
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  from      User     @relation("LikedBy", fields: [fromId], references: [id])
  fromId    String   @db.ObjectId
  to        User     @relation("LikedUsers", fields: [toId], references: [id])
  toId      String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Dislike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  from      User     @relation("DislikedBy", fields: [fromId], references: [id])
  fromId    String   @db.ObjectId
  to        User     @relation("DislikedUsers", fields: [toId], references: [id])
  toId      String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Message {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  sender      User       @relation("SenderUser", fields: [senderId], references: [id])
  senderId    String     @db.ObjectId
  receiver    User       @relation("ReceiverUser", fields: [receiverId], references: [id])
  receiverId  String     @db.ObjectId
  message     String     @db.String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("messages")
}

